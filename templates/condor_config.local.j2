# Networking
CONDOR_HOST = {{ htcondor_server }}
COLLECTOR_HOST = $(CONDOR_HOST):{{ htcondor_server_port }}
SHARED_PORT_PORT = {{ htcondor_shared_port }}
WANT_UDP_COMMAND_SOCKET = False
UPDATE_COLLECTOR_WITH_TCP = True
UPDATE_VIEW_COLLECTOR_WITH_TCP = True
{% if htcondor_network_interface is defined %}
NETWORK_INTERFACE = {{ htcondor_network_interface }}
{% endif %}
# Security
ALLOW_WRITE = {{ htcondor_allow_write }}
ALLOW_READ = $(ALLOW_WRITE)
ALLOW_NEGOTIATOR = {{ htcondor_allow_negotiator }}
{% if htcondor_allow_administrator is defined %}
ALLOW_ADMINISTRATOR = {{ htcondor_allow_administrator }}
{% endif %}
ALLOW_OWNER = $(ALLOW_ADMINISTRATOR)
ALLOW_CLIENT = *
FILESYSTEM_DOMAIN = {{ htcondor_domain }}
UID_DOMAIN = {{ htcondor_domain }}
TRUST_UID_DOMAIN = True
SOFT_UID_DOMAIN = True
SEC_CLIENT_AUTHENTICATION_METHODS = IDTOKENS, FS
SEC_READ_AUTHENTICATION_METHODS = IDTOKENS, FS

# Job management
{% if htcondor_system_periodic_hold is defined %}
SYSTEM_PERIODIC_HOLD = \
  (JobStatus == 1 || JobStatus == 2) && \
  ((time() - JobStartDate) >= ({{ htcondor_system_periodic_hold }}))
SYSTEM_PERIODIC_HOLD_REASON = \
  ifThenElse(((time() - JobStartDate) >= ({{ htcondor_system_periodic_hold }}), \
             "Maximum wallclock time exceeded", \
		 "Unspecified reason")
SYSTEM_PERIODIC_REMOVE = \
  (JobStatus == 5 && time() - EnteredCurrentStatus > {{ htcondor_system_periodic_remove }})
{% endif %}

# Scheduling
MASTER_UPDATE_INTERVAL = {{ htcondor_master_update_interval }}
CLASSAD_LIFETIME = {{ htcondor_classad_lifetime }}
NEGOTIATOR_INTERVAL = {{ htcondor_negotiator_interval }}
NEGOTIATOR_UPDATE_INTERVAL = {{ htcondor_negotiator_update_interval }}
SCHEDD_INTERVAL = {{ htcondor_schedd_interval }}
JOB_START_COUNT = {{ htcondor_job_start_count }}
JOB_START_DELAY = {{ htcondor_job_start_delay }}
CLAIM_WORKLIFE = {{ htcondor_claim_worklife }}
NEGOTIATOR_POST_JOB_RANK = {{ htcondor_negotiator_post_job_rank }}
